/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.practicaproyecto;

/**
 *
 * @author Luisp
 */
public class interfaz_inicial extends javax.swing.JFrame {

    /**
     * Creates new form interfaz_inicial
     */
    public interfaz_inicial() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputcantidad = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Laberinto");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 104, -1));

        jLabel2.setText("Cantidad de columnas y filas:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 270, -1));
        jPanel1.add(inputcantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, 100, -1));

        jButton1.setText("Generar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 110, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        lista listagrande = new lista();
        for (int i = 1; i <= Integer.parseInt(inputcantidad.getText()) * Integer.parseInt(inputcantidad.getText()); i++) {
            lista listaadyacencia = new lista();
            vertice nuevo = new vertice(i, listaadyacencia);
            listagrande.insertar(nuevo);
        }
        for (int i = 1; i <= Integer.parseInt(inputcantidad.getText()) * Integer.parseInt(inputcantidad.getText()); i++) {
            
            //CUANDO I SEA 1:
            
            if (i == 1) {
                vertice nuevoadyacencia = listagrande.CopiarDato(listagrande.buscar(i).getpNext());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia);
                vertice nuevoadyacencia1 = listagrande.CopiarDato(listagrande.buscarAbajo(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia1);
                nuevoadyacencia.setpNext(nuevoadyacencia1);
            
                // CUANDO I SEA ESQUINA ARRIBA DERECHA:
            } else if (i == Integer.parseInt(inputcantidad.getText())) {
                vertice nuevoadyacencia = listagrande.CopiarDato(listagrande.buscar(i).getpPrev());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia);
                vertice nuevoadyacencia1 = listagrande.CopiarDato(listagrande.buscarAbajo(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia1);
                nuevoadyacencia.setpNext(nuevoadyacencia1);
                
                // CUANDO I SEA ESQUINA ABAJO IZQUIERDA
            } else if (i == Integer.parseInt(inputcantidad.getText()) * Integer.parseInt(inputcantidad.getText()) + 1 - Integer.parseInt(inputcantidad.getText())) {
                vertice nuevoadyacencia = listagrande.CopiarDato(listagrande.buscar(i).getpNext());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia);
                vertice nuevoadyacencia1 = listagrande.CopiarDato(listagrande.buscarArriba(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia1);
                nuevoadyacencia.setpNext(nuevoadyacencia1);
                
                // CUANDO I SEA ESQUINA ABAJO DERECHA
            } else if (i == Integer.parseInt(inputcantidad.getText()) * Integer.parseInt(inputcantidad.getText())) {
                vertice nuevoadyacencia = listagrande.CopiarDato(listagrande.buscar(i).getpPrev());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia);
                vertice nuevoadyacencia1 = listagrande.CopiarDato(listagrande.buscarArriba(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia1);
                nuevoadyacencia.setpNext(nuevoadyacencia1);
                
                // CUANDO I SEA BORDE DE ARRIBA
            } else if (i < Integer.parseInt(inputcantidad.getText()) && i > 1) {
                vertice nuevoadyacencia = listagrande.CopiarDato(listagrande.buscar(i).getpNext());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia);
                vertice nuevoadyacencia1 = listagrande.CopiarDato(listagrande.buscar(i).getpPrev());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia1);
                vertice nuevoadyacencia2 = listagrande.CopiarDato(listagrande.buscarAbajo(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia2);
                nuevoadyacencia.setpNext(nuevoadyacencia1);
                nuevoadyacencia1.setpNext(nuevoadyacencia2);
                
                // CUANDO I SEA BORDE DE ABAJO 
            } else if (i > Integer.parseInt(inputcantidad.getText()) * Integer.parseInt(inputcantidad.getText()) + 1 - Integer.parseInt(inputcantidad.getText()) && i < Integer.parseInt(inputcantidad.getText()) * Integer.parseInt(inputcantidad.getText())) {
                vertice nuevoadyacencia = listagrande.CopiarDato(listagrande.buscar(i).getpNext());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia);
                vertice nuevoadyacencia1 = listagrande.CopiarDato(listagrande.buscar(i).getpPrev());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia1);
                vertice nuevoadyacencia2 = listagrande.CopiarDato(listagrande.buscarArriba(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia2);
                nuevoadyacencia.setpNext(nuevoadyacencia1);
                nuevoadyacencia1.setpNext(nuevoadyacencia2);
                
                // CUANDO I SEA BORDE DERECHA
            } else if (i % Integer.parseInt(inputcantidad.getText()) == 0) {
                vertice nuevoadyacencia = listagrande.CopiarDato(listagrande.buscar(i).getpPrev());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia);
                vertice nuevoadyacencia1 = listagrande.CopiarDato(listagrande.buscarArriba(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia1);
                vertice nuevoadyacencia2 = listagrande.CopiarDato(listagrande.buscarAbajo(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia2);
                nuevoadyacencia.setpNext(nuevoadyacencia1);
                nuevoadyacencia1.setpNext(nuevoadyacencia2);
                
                // CUANDO I SEA BORDE IZQUIERDO
            }else if (i % Integer.parseInt(inputcantidad.getText()) == 1){
                vertice nuevoadyacencia3 = listagrande.CopiarDato(listagrande.buscar(i).getpNext());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia3);
                vertice nuevoadyacencia4 = listagrande.CopiarDato(listagrande.buscarArriba(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia4);
                vertice nuevoadyacencia5 = listagrande.CopiarDato(listagrande.buscarAbajo(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia5);
                nuevoadyacencia3.setpNext(nuevoadyacencia4);
                nuevoadyacencia4.setpNext(nuevoadyacencia5);
                
                // CUANDO SEA EL RESTO (DEBERIAN SER LOS QUE TENGAN 4 ADYACENTES)
            }else {
                vertice nuevoadyacencia = listagrande.CopiarDato(listagrande.buscar(i).getpPrev());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia);
                vertice nuevoadyacencia1 = listagrande.CopiarDato(listagrande.buscarAbajo(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia1);
                vertice nuevoadyacencia2 = listagrande.CopiarDato(listagrande.buscarArriba(i, Integer.parseInt(inputcantidad.getText())));
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia2);
                vertice nuevoadyacencia3 = listagrande.CopiarDato(listagrande.buscar(i).getpNext());
                listagrande.buscar(i).getListaadyacencia().insertar(nuevoadyacencia3);
                nuevoadyacencia.setpNext(nuevoadyacencia1);
                nuevoadyacencia1.setpNext(nuevoadyacencia2);
                nuevoadyacencia2.setpNext(nuevoadyacencia3);
            }
        }
        lista listafinal = new lista();
        listafinal = listagrande.arbolExpMinPrim(Integer.parseInt(inputcantidad.getText()));
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz_inicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz_inicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz_inicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz_inicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz_inicial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputcantidad;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
